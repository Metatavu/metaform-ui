/* tslint:disable */
/* eslint-disable */
/**
 * Metaform REST API
 * REST API for Metaform
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    Conflict,
    ConflictFromJSON,
    ConflictToJSON,
    Forbidden,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    Metaform,
    MetaformFromJSON,
    MetaformToJSON,
    NotFound,
    NotFoundFromJSON,
    NotFoundToJSON,
} from '../models';

export interface CreateMetaformRequest {
    metaform: Metaform;
}

export interface DeleteMetaformRequest {
    metaformId: string;
}

export interface FindMetaformRequest {
    metaformId: string;
    replyId?: string;
    ownerKey?: string;
}

export interface UpdateMetaformRequest {
    metaform: Metaform;
    metaformId: string;
}

/**
 * 
 */
export class MetaformsApi extends runtime.BaseAPI {

    /**
     * Creates new Metaform
     * create new Metaform
     */
    async createMetaformRaw(requestParameters: CreateMetaformRequest): Promise<runtime.ApiResponse<Metaform>> {
        if (requestParameters.metaform === null || requestParameters.metaform === undefined) {
            throw new runtime.RequiredError('metaform','Required parameter requestParameters.metaform was null or undefined when calling createMetaform.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/metaforms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetaformToJSON(requestParameters.metaform),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaformFromJSON(jsonValue));
    }

    /**
     * Creates new Metaform
     * create new Metaform
     */
    async createMetaform(requestParameters: CreateMetaformRequest): Promise<Metaform> {
        const response = await this.createMetaformRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a Metaform
     * Deletes Metaform
     */
    async deleteMetaformRaw(requestParameters: DeleteMetaformRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.metaformId === null || requestParameters.metaformId === undefined) {
            throw new runtime.RequiredError('metaformId','Required parameter requestParameters.metaformId was null or undefined when calling deleteMetaform.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/metaforms/{metaformId}`.replace(`{${"metaformId"}}`, encodeURIComponent(String(requestParameters.metaformId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Metaform
     * Deletes Metaform
     */
    async deleteMetaform(requestParameters: DeleteMetaformRequest): Promise<void> {
        await this.deleteMetaformRaw(requestParameters);
    }

    /**
     * Finds a single Metaform
     * Finds single Metaform
     */
    async findMetaformRaw(requestParameters: FindMetaformRequest): Promise<runtime.ApiResponse<Metaform>> {
        if (requestParameters.metaformId === null || requestParameters.metaformId === undefined) {
            throw new runtime.RequiredError('metaformId','Required parameter requestParameters.metaformId was null or undefined when calling findMetaform.');
        }

        const queryParameters: any = {};

        if (requestParameters.replyId !== undefined) {
            queryParameters['replyId'] = requestParameters.replyId;
        }

        if (requestParameters.ownerKey !== undefined) {
            queryParameters['ownerKey'] = requestParameters.ownerKey;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/metaforms/{metaformId}`.replace(`{${"metaformId"}}`, encodeURIComponent(String(requestParameters.metaformId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaformFromJSON(jsonValue));
    }

    /**
     * Finds a single Metaform
     * Finds single Metaform
     */
    async findMetaform(requestParameters: FindMetaformRequest): Promise<Metaform> {
        const response = await this.findMetaformRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists Metaforms. User receives only metaforms where he/she has permission to.
     * Lists Metaforms
     */
    async listMetaformsRaw(): Promise<runtime.ApiResponse<Array<Metaform>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/metaforms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MetaformFromJSON));
    }

    /**
     * Lists Metaforms. User receives only metaforms where he/she has permission to.
     * Lists Metaforms
     */
    async listMetaforms(): Promise<Array<Metaform>> {
        const response = await this.listMetaformsRaw();
        return await response.value();
    }

    /**
     * Updates a Metaform
     * Updates Metaform
     */
    async updateMetaformRaw(requestParameters: UpdateMetaformRequest): Promise<runtime.ApiResponse<Metaform>> {
        if (requestParameters.metaform === null || requestParameters.metaform === undefined) {
            throw new runtime.RequiredError('metaform','Required parameter requestParameters.metaform was null or undefined when calling updateMetaform.');
        }

        if (requestParameters.metaformId === null || requestParameters.metaformId === undefined) {
            throw new runtime.RequiredError('metaformId','Required parameter requestParameters.metaformId was null or undefined when calling updateMetaform.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/metaforms/{metaformId}`.replace(`{${"metaformId"}}`, encodeURIComponent(String(requestParameters.metaformId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MetaformToJSON(requestParameters.metaform),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaformFromJSON(jsonValue));
    }

    /**
     * Updates a Metaform
     * Updates Metaform
     */
    async updateMetaform(requestParameters: UpdateMetaformRequest): Promise<Metaform> {
        const response = await this.updateMetaformRaw(requestParameters);
        return await response.value();
    }

}
