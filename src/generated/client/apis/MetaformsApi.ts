/* tslint:disable */
/* eslint-disable */
/**
 * Metaform REST API
 * REST API for Metaform
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    Forbidden,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    Metaform,
    MetaformFromJSON,
    MetaformToJSON,
    NotFound,
    NotFoundFromJSON,
    NotFoundToJSON,
} from '../models';

export interface CreateMetaformRequest {
    metaform: Metaform;
    realmId: string;
}

export interface DeleteMetaformRequest {
    realmId: string;
    metaformId: string;
}

export interface FindMetaformRequest {
    realmId: string;
    metaformId: string;
}

export interface ListMetaformsRequest {
    realmId: string;
}

export interface UpdateMetaformRequest {
    metaform: Metaform;
    realmId: string;
    metaformId: string;
}

/**
 * 
 */
export class MetaformsApi extends runtime.BaseAPI {

    /**
     * Creates new Metaform
     * create new Metaform
     */
    async createMetaformRaw(requestParameters: CreateMetaformRequest): Promise<runtime.ApiResponse<Metaform>> {
        if (requestParameters.metaform === null || requestParameters.metaform === undefined) {
            throw new runtime.RequiredError('metaform','Required parameter requestParameters.metaform was null or undefined when calling createMetaform.');
        }

        if (requestParameters.realmId === null || requestParameters.realmId === undefined) {
            throw new runtime.RequiredError('realmId','Required parameter requestParameters.realmId was null or undefined when calling createMetaform.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/realms/{realmId}/metaforms`.replace(`{${"realmId"}}`, encodeURIComponent(String(requestParameters.realmId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MetaformToJSON(requestParameters.metaform),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaformFromJSON(jsonValue));
    }

    /**
     * Creates new Metaform
     * create new Metaform
     */
    async createMetaform(requestParameters: CreateMetaformRequest): Promise<Metaform> {
        const response = await this.createMetaformRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a Metaform
     * Deletes Metaform
     */
    async deleteMetaformRaw(requestParameters: DeleteMetaformRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.realmId === null || requestParameters.realmId === undefined) {
            throw new runtime.RequiredError('realmId','Required parameter requestParameters.realmId was null or undefined when calling deleteMetaform.');
        }

        if (requestParameters.metaformId === null || requestParameters.metaformId === undefined) {
            throw new runtime.RequiredError('metaformId','Required parameter requestParameters.metaformId was null or undefined when calling deleteMetaform.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/realms/{realmId}/metaforms/{metaformId}`.replace(`{${"realmId"}}`, encodeURIComponent(String(requestParameters.realmId))).replace(`{${"metaformId"}}`, encodeURIComponent(String(requestParameters.metaformId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Metaform
     * Deletes Metaform
     */
    async deleteMetaform(requestParameters: DeleteMetaformRequest): Promise<void> {
        await this.deleteMetaformRaw(requestParameters);
    }

    /**
     * Finds a single Metaform
     * Finds single Metaform
     */
    async findMetaformRaw(requestParameters: FindMetaformRequest): Promise<runtime.ApiResponse<Metaform>> {
        if (requestParameters.realmId === null || requestParameters.realmId === undefined) {
            throw new runtime.RequiredError('realmId','Required parameter requestParameters.realmId was null or undefined when calling findMetaform.');
        }

        if (requestParameters.metaformId === null || requestParameters.metaformId === undefined) {
            throw new runtime.RequiredError('metaformId','Required parameter requestParameters.metaformId was null or undefined when calling findMetaform.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/realms/{realmId}/metaforms/{metaformId}`.replace(`{${"realmId"}}`, encodeURIComponent(String(requestParameters.realmId))).replace(`{${"metaformId"}}`, encodeURIComponent(String(requestParameters.metaformId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaformFromJSON(jsonValue));
    }

    /**
     * Finds a single Metaform
     * Finds single Metaform
     */
    async findMetaform(requestParameters: FindMetaformRequest): Promise<Metaform> {
        const response = await this.findMetaformRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists Metaforms from the realm. User receives only metaforms where he/she has permission to.
     * Lists Metaforms
     */
    async listMetaformsRaw(requestParameters: ListMetaformsRequest): Promise<runtime.ApiResponse<Array<Metaform>>> {
        if (requestParameters.realmId === null || requestParameters.realmId === undefined) {
            throw new runtime.RequiredError('realmId','Required parameter requestParameters.realmId was null or undefined when calling listMetaforms.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/realms/{realmId}/metaforms`.replace(`{${"realmId"}}`, encodeURIComponent(String(requestParameters.realmId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MetaformFromJSON));
    }

    /**
     * Lists Metaforms from the realm. User receives only metaforms where he/she has permission to.
     * Lists Metaforms
     */
    async listMetaforms(requestParameters: ListMetaformsRequest): Promise<Array<Metaform>> {
        const response = await this.listMetaformsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates a Metaform
     * Updates Metaform
     */
    async updateMetaformRaw(requestParameters: UpdateMetaformRequest): Promise<runtime.ApiResponse<Metaform>> {
        if (requestParameters.metaform === null || requestParameters.metaform === undefined) {
            throw new runtime.RequiredError('metaform','Required parameter requestParameters.metaform was null or undefined when calling updateMetaform.');
        }

        if (requestParameters.realmId === null || requestParameters.realmId === undefined) {
            throw new runtime.RequiredError('realmId','Required parameter requestParameters.realmId was null or undefined when calling updateMetaform.');
        }

        if (requestParameters.metaformId === null || requestParameters.metaformId === undefined) {
            throw new runtime.RequiredError('metaformId','Required parameter requestParameters.metaformId was null or undefined when calling updateMetaform.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // bearer authentication
        }

        const response = await this.request({
            path: `/realms/{realmId}/metaforms/{metaformId}`.replace(`{${"realmId"}}`, encodeURIComponent(String(requestParameters.realmId))).replace(`{${"metaformId"}}`, encodeURIComponent(String(requestParameters.metaformId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MetaformToJSON(requestParameters.metaform),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => MetaformFromJSON(jsonValue));
    }

    /**
     * Updates a Metaform
     * Updates Metaform
     */
    async updateMetaform(requestParameters: UpdateMetaformRequest): Promise<Metaform> {
        const response = await this.updateMetaformRaw(requestParameters);
        return await response.value();
    }

}
