/* tslint:disable */
/* eslint-disable */
/**
 * Metaform REST API
 * REST API for Metaform
 *
 * The version of the OpenAPI document: 2.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    BadRequest,
    BadRequestFromJSON,
    BadRequestToJSON,
    ExportTheme,
    ExportThemeFromJSON,
    ExportThemeToJSON,
    Forbidden,
    ForbiddenFromJSON,
    ForbiddenToJSON,
    InternalServerError,
    InternalServerErrorFromJSON,
    InternalServerErrorToJSON,
    NotFound,
    NotFoundFromJSON,
    NotFoundToJSON,
} from '../models';

export interface CreateExportThemeRequest {
    exportTheme: ExportTheme;
}

export interface DeleteExportThemeRequest {
    exportThemeId: string;
}

export interface FindExportThemeRequest {
    exportThemeId: string;
}

export interface UpdateExportThemeRequest {
    exportTheme: ExportTheme;
    exportThemeId: string;
}

/**
 * 
 */
export class ExportThemesApi extends runtime.BaseAPI {

    /**
     * Creates new form export theme
     * create new form export theme
     */
    async createExportThemeRaw(requestParameters: CreateExportThemeRequest): Promise<runtime.ApiResponse<ExportTheme>> {
        if (requestParameters.exportTheme === null || requestParameters.exportTheme === undefined) {
            throw new runtime.RequiredError('exportTheme','Required parameter requestParameters.exportTheme was null or undefined when calling createExportTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exportThemes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExportThemeToJSON(requestParameters.exportTheme),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportThemeFromJSON(jsonValue));
    }

    /**
     * Creates new form export theme
     * create new form export theme
     */
    async createExportTheme(requestParameters: CreateExportThemeRequest): Promise<ExportTheme> {
        const response = await this.createExportThemeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes an export theme
     * Deletes an export theme
     */
    async deleteExportThemeRaw(requestParameters: DeleteExportThemeRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.exportThemeId === null || requestParameters.exportThemeId === undefined) {
            throw new runtime.RequiredError('exportThemeId','Required parameter requestParameters.exportThemeId was null or undefined when calling deleteExportTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exportThemes/{exportThemeId}`.replace(`{${"exportThemeId"}}`, encodeURIComponent(String(requestParameters.exportThemeId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes an export theme
     * Deletes an export theme
     */
    async deleteExportTheme(requestParameters: DeleteExportThemeRequest): Promise<void> {
        await this.deleteExportThemeRaw(requestParameters);
    }

    /**
     * Finds single export theme
     * Finds single export theme
     */
    async findExportThemeRaw(requestParameters: FindExportThemeRequest): Promise<runtime.ApiResponse<ExportTheme>> {
        if (requestParameters.exportThemeId === null || requestParameters.exportThemeId === undefined) {
            throw new runtime.RequiredError('exportThemeId','Required parameter requestParameters.exportThemeId was null or undefined when calling findExportTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exportThemes/{exportThemeId}`.replace(`{${"exportThemeId"}}`, encodeURIComponent(String(requestParameters.exportThemeId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportThemeFromJSON(jsonValue));
    }

    /**
     * Finds single export theme
     * Finds single export theme
     */
    async findExportTheme(requestParameters: FindExportThemeRequest): Promise<ExportTheme> {
        const response = await this.findExportThemeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Lists export themes
     * Lists form export themes
     */
    async listExportThemesRaw(): Promise<runtime.ApiResponse<Array<ExportTheme>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exportThemes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ExportThemeFromJSON));
    }

    /**
     * Lists export themes
     * Lists form export themes
     */
    async listExportThemes(): Promise<Array<ExportTheme>> {
        const response = await this.listExportThemesRaw();
        return await response.value();
    }

    /**
     * Updates export theme
     * Updates export theme
     */
    async updateExportThemeRaw(requestParameters: UpdateExportThemeRequest): Promise<runtime.ApiResponse<ExportTheme>> {
        if (requestParameters.exportTheme === null || requestParameters.exportTheme === undefined) {
            throw new runtime.RequiredError('exportTheme','Required parameter requestParameters.exportTheme was null or undefined when calling updateExportTheme.');
        }

        if (requestParameters.exportThemeId === null || requestParameters.exportThemeId === undefined) {
            throw new runtime.RequiredError('exportThemeId','Required parameter requestParameters.exportThemeId was null or undefined when calling updateExportTheme.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json;charset=utf-8';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearer", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/exportThemes/{exportThemeId}`.replace(`{${"exportThemeId"}}`, encodeURIComponent(String(requestParameters.exportThemeId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExportThemeToJSON(requestParameters.exportTheme),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ExportThemeFromJSON(jsonValue));
    }

    /**
     * Updates export theme
     * Updates export theme
     */
    async updateExportTheme(requestParameters: UpdateExportThemeRequest): Promise<ExportTheme> {
        const response = await this.updateExportThemeRaw(requestParameters);
        return await response.value();
    }

}
