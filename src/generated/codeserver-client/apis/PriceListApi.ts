/* tslint:disable */
/* eslint-disable */
/**
 * CodeServer REST API
 * CodeServer REST API v3.0
 *
 * The version of the OpenAPI document: 3.0
 * Contact: codeserver-support@elisa.fi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    PriceList,
    PriceListFromJSON,
    PriceListToJSON,
} from '../models';

export interface GetPriceListRequest {
    classificationId: string;
    pricelistId: string;
}

/**
 * 
 */
export class PriceListApi extends runtime.BaseAPI {

    /**
     * Get description (metadata) of specified price list resource.
     * Get description of specified price list
     */
    async getPriceListRaw(requestParameters: GetPriceListRequest): Promise<runtime.ApiResponse<PriceList>> {
        if (requestParameters.classificationId === null || requestParameters.classificationId === undefined) {
            throw new runtime.RequiredError('classificationId','Required parameter requestParameters.classificationId was null or undefined when calling getPriceList.');
        }

        if (requestParameters.pricelistId === null || requestParameters.pricelistId === undefined) {
            throw new runtime.RequiredError('pricelistId','Required parameter requestParameters.pricelistId was null or undefined when calling getPriceList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("BearerAuthScheme", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v3/classifications/{classificationId}/pricelists/{pricelistId}`.replace(`{${"classificationId"}}`, encodeURIComponent(String(requestParameters.classificationId))).replace(`{${"pricelistId"}}`, encodeURIComponent(String(requestParameters.pricelistId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PriceListFromJSON(jsonValue));
    }

    /**
     * Get description (metadata) of specified price list resource.
     * Get description of specified price list
     */
    async getPriceList(requestParameters: GetPriceListRequest): Promise<PriceList> {
        const response = await this.getPriceListRaw(requestParameters);
        return await response.value();
    }

}
