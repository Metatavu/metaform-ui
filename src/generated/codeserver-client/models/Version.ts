/* tslint:disable */
/* eslint-disable */
/**
 * CodeServer REST API
 * CodeServer REST API v3.0
 *
 * The version of the OpenAPI document: 3.0
 * Contact: codeserver-support@elisa.fi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    Field,
    FieldFromJSON,
    FieldFromJSONTyped,
    FieldToJSON,
    Status,
    StatusFromJSON,
    StatusFromJSONTyped,
    StatusToJSON,
} from './';

/**
 * CodeServer classification version
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * Classification version concept code fields
     * @type {Array<Field>}
     * @memberof Version
     */
    definitions: Array<Field>;
    /**
     * Classification identifier
     * @type {string}
     * @memberof Version
     */
    classificationId?: string;
    /**
     * Classification name
     * @type {string}
     * @memberof Version
     */
    classificationName?: string;
    /**
     * Version identifier
     * @type {string}
     * @memberof Version
     */
    versionId: string;
    /**
     * Version name
     * @type {string}
     * @memberof Version
     */
    versionName: string;
    /**
     * 
     * @type {Status}
     * @memberof Version
     */
    status: Status;
    /**
     * Validity beginning date without time part.
     * @type {Date}
     * @memberof Version
     */
    beginDate: Date;
    /**
     * Validity expiration date without time part.
     * @type {Date}
     * @memberof Version
     */
    expirationDate: Date;
    /**
     * Version OID root
     * @type {string}
     * @memberof Version
     */
    oidRoot?: string;
    /**
     * Next OID. Only relevant if oidRoot is not empty.
     * @type {number}
     * @memberof Version
     */
    nextOid?: number;
    /**
     * Is OID used as concept code id or not. Only relevant if oidRoot is not empty.
     * @type {boolean}
     * @memberof Version
     */
    oid2id?: boolean;
    /**
     * Type of hierarchy validation. Only relevant for versions in hierarchical classifications.
     * @type {string}
     * @memberof Version
     */
    hierarchyIntegrity?: VersionHierarchyIntegrityEnum;
    /**
     * Optional names for hierarchy levels. Only relevant for versions in hierarchical classifications.
     * @type {Array<string>}
     * @memberof Version
     */
    hierarchyLevelNames?: Array<string>;
    /**
     * Last modified date and time.
     * @type {Date}
     * @memberof Version
     */
    lastModifiedDate: Date;
    /**
     * Name of last modifier.
     * @type {string}
     * @memberof Version
     */
    lastModifiedBy: string;
}

export function VersionFromJSON(json: any): Version {
    return VersionFromJSONTyped(json, false);
}

export function VersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Version {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'definitions': ((json['definitions'] as Array<any>).map(FieldFromJSON)),
        'classificationId': !exists(json, 'classificationId') ? undefined : json['classificationId'],
        'classificationName': !exists(json, 'classificationName') ? undefined : json['classificationName'],
        'versionId': json['versionId'],
        'versionName': json['versionName'],
        'status': StatusFromJSON(json['status']),
        'beginDate': (new Date(json['beginDate'])),
        'expirationDate': (new Date(json['expirationDate'])),
        'oidRoot': !exists(json, 'oidRoot') ? undefined : json['oidRoot'],
        'nextOid': !exists(json, 'nextOid') ? undefined : json['nextOid'],
        'oid2id': !exists(json, 'oid2id') ? undefined : json['oid2id'],
        'hierarchyIntegrity': !exists(json, 'hierarchyIntegrity') ? undefined : json['hierarchyIntegrity'],
        'hierarchyLevelNames': !exists(json, 'hierarchyLevelNames') ? undefined : json['hierarchyLevelNames'],
        'lastModifiedDate': (new Date(json['lastModifiedDate'])),
        'lastModifiedBy': json['lastModifiedBy'],
    };
}

export function VersionToJSON(value?: Version | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'definitions': ((value.definitions as Array<any>).map(FieldToJSON)),
        'classificationId': value.classificationId,
        'classificationName': value.classificationName,
        'versionId': value.versionId,
        'versionName': value.versionName,
        'status': StatusToJSON(value.status),
        'beginDate': (value.beginDate.toISOString().substr(0,10)),
        'expirationDate': (value.expirationDate.toISOString().substr(0,10)),
        'oidRoot': value.oidRoot,
        'nextOid': value.nextOid,
        'oid2id': value.oid2id,
        'hierarchyIntegrity': value.hierarchyIntegrity,
        'hierarchyLevelNames': value.hierarchyLevelNames,
        'lastModifiedDate': (value.lastModifiedDate.toISOString()),
        'lastModifiedBy': value.lastModifiedBy,
    };
}

/**
* @export
* @enum {string}
*/
export enum VersionHierarchyIntegrityEnum {
    STRICT = 'STRICT',
    LOOSE = 'LOOSE'
}


