/* tslint:disable */
/* eslint-disable */
/**
 * CodeServer REST API
 * CodeServer REST API v3.0
 *
 * The version of the OpenAPI document: 3.0
 * Contact: codeserver-support@elisa.fi
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    FieldFieldQualifications,
    FieldFieldQualificationsFromJSON,
    FieldFieldQualificationsFromJSONTyped,
    FieldFieldQualificationsToJSON,
    FieldReferencedCodeSystem,
    FieldReferencedCodeSystemFromJSON,
    FieldReferencedCodeSystemFromJSONTyped,
    FieldReferencedCodeSystemToJSON,
} from './';

/**
 * Version and price list field, field type, reference identification and field value qualifications
 * @export
 * @interface Field
 */
export interface Field {
    /**
     * Name of the field
     * @type {string}
     * @memberof Field
     */
    fieldName?: string;
    /**
     * Type of the field
     * @type {string}
     * @memberof Field
     */
    fieldType?: FieldFieldTypeEnum;
    /**
     * Sub-type of attribute field. Used when fieldType is ATTRIBUTE.
     * @type {string}
     * @memberof Field
     */
    fieldSubType?: FieldFieldSubTypeEnum;
    /**
     * Description of the field
     * @type {string}
     * @memberof Field
     */
    fieldDescription?: string;
    /**
     * If true, the field access is restricted.
     * @type {boolean}
     * @memberof Field
     */
    restrictedAccess?: boolean;
    /**
     * 
     * @type {FieldReferencedCodeSystem}
     * @memberof Field
     */
    referencedCodeSystem?: FieldReferencedCodeSystem;
    /**
     * Used when fieldType is REFERENCE. Can field have multiple values (aka one-to-may reference)?
     * @type {boolean}
     * @memberof Field
     */
    multipleValues?: boolean;
    /**
     * Used when fieldType is REFERENCE. Value 'true' means that this field is 'backward reference' of a two-way-reference, value 'false' means that this field is normal reference or 'forward reference' of a two-way-reference. 'Backward reference' fields can not be written to in POST, PUT and PATCH requests.
     * @type {boolean}
     * @memberof Field
     */
    backwardReference?: boolean;
    /**
     * 
     * @type {FieldFieldQualifications}
     * @memberof Field
     */
    fieldQualifications?: FieldFieldQualifications;
}

export function FieldFromJSON(json: any): Field {
    return FieldFromJSONTyped(json, false);
}

export function FieldFromJSONTyped(json: any, ignoreDiscriminator: boolean): Field {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fieldName': !exists(json, 'fieldName') ? undefined : json['fieldName'],
        'fieldType': !exists(json, 'fieldType') ? undefined : json['fieldType'],
        'fieldSubType': !exists(json, 'fieldSubType') ? undefined : json['fieldSubType'],
        'fieldDescription': !exists(json, 'fieldDescription') ? undefined : json['fieldDescription'],
        'restrictedAccess': !exists(json, 'restrictedAccess') ? undefined : json['restrictedAccess'],
        'referencedCodeSystem': !exists(json, 'referencedCodeSystem') ? undefined : FieldReferencedCodeSystemFromJSON(json['referencedCodeSystem']),
        'multipleValues': !exists(json, 'multipleValues') ? undefined : json['multipleValues'],
        'backwardReference': !exists(json, 'backwardReference') ? undefined : json['backwardReference'],
        'fieldQualifications': !exists(json, 'fieldQualifications') ? undefined : FieldFieldQualificationsFromJSON(json['fieldQualifications']),
    };
}

export function FieldToJSON(value?: Field | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'fieldName': value.fieldName,
        'fieldType': value.fieldType,
        'fieldSubType': value.fieldSubType,
        'fieldDescription': value.fieldDescription,
        'restrictedAccess': value.restrictedAccess,
        'referencedCodeSystem': FieldReferencedCodeSystemToJSON(value.referencedCodeSystem),
        'multipleValues': value.multipleValues,
        'backwardReference': value.backwardReference,
        'fieldQualifications': FieldFieldQualificationsToJSON(value.fieldQualifications),
    };
}

/**
* @export
* @enum {string}
*/
export enum FieldFieldTypeEnum {
    BASE = 'BASE',
    FIXED = 'FIXED',
    ATTRIBUTE = 'ATTRIBUTE',
    REFERENCE = 'REFERENCE'
}
/**
* @export
* @enum {string}
*/
export enum FieldFieldSubTypeEnum {
    NUMERIC = 'NUMERIC',
    SHORTTEXT = 'SHORTTEXT',
    LONGTEXT = 'LONGTEXT',
    FORMATTEDTEXT = 'FORMATTEDTEXT',
    VALUESET = 'VALUESET',
    DATE = 'DATE',
    LINK = 'LINK'
}


